% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/options.R
\name{add_options}
\alias{add_options}
\alias{remove_options}
\alias{add_option_parameters}
\title{Functions for options in a workflow set}
\usage{
add_options(x, ..., id = NULL, strict = FALSE)

remove_options(x, ...)

add_option_parameters(x, id = NULL, strict = FALSE)
}
\arguments{
\item{x}{A workflow set}

\item{...}{A list of named options. For \code{remove_options()} this can be a
series of unquoted option names.}

\item{id}{A character string of one or more values from the \code{wflow_id}
column that indicates which options to update. By default, all workflows
are updated.}

\item{strict}{A logical; show execution stop if existing options are being
replaced?}
}
\value{
An updated workflow set.
}
\description{
Functions for options in a workflow set
}
\details{
\code{add_options()} is used to update all of the options in a workflow set.

\code{remove_options()} will eliminate specific options across rows.

\code{add_option_parameters()} adds a parameter object to the \code{option} column
(if parameters are being tuned).

Note that executing a function on the workflow set, such as \code{tune_grid()},
will add any options given to that function to the \code{option} column.
}
\examples{
two_class_set \%>\%
  add_options(a = 1)

two_class_set \%>\%
  add_options(a = 1) \%>\%
  add_options(b = 2, id = "none_cart")

library(tune)
two_class_set \%>\%
  add_option_parameters()
}
