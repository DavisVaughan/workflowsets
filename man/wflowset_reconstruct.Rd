% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compat-dplyr.R
\name{wflowset_reconstruct}
\alias{wflowset_reconstruct}
\title{Extending objects with new workflowset subclass}
\usage{
wflowset_reconstruct(x)
}
\arguments{
\item{x}{A data frame to restore to a \code{workflow_set} subclass.}
}
\value{
\code{x} as a \code{workflow_set}.
}
\description{
\code{ wflowset_reconstruct()} encapsulates the logic for allowing new workflow
set subclass to work properly with vctrs (through \code{vctrs::vec_restore()}) and
dplyr (through \code{dplyr::dplyr_reconstruct()}). It is intended to be a
developer tool, and is not required for normal usage of \code{workflowsets}.
}
\details{
workflow set objects are considered "reconstructable" after a vctrs/dplyr '
operation if:
\itemize{
\item \code{x} and \code{to} both have an columns named '\code{wflow_id}', '\code{info}', '\code{option}',
'\code{result}' (column and row order do not matter) and that those columns are
the correct type. "Correct type" is defined by the internal function
\code{new_workflow_set()}.
}

Adding new columns and row additions/deletions still result in workflow sets
as long as the new rows adhere to the definition of a workflow set.
}
\examples{
to <- two_class_set

# Imitate a vctrs/dplyr operation,
# where the class might be lost along the way
x <- tibble::as_tibble(to)

# Say we added a new column to `x`. Here we mock a `mutate()`.
x$foo <- "bar"

# This is still reconstructable to `to`
 wflowset_reconstruct(x)

# Say we lose the first column, we get a bare tibble:
x <- x[, 1]
wflowset_reconstruct(x)

}
